/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gradebook;

/**
 *
 * @author mdema
 */
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JMenuItem;
import javax.swing.SwingUtilities;

public class Input extends javax.swing.JFrame {

    /**
     * Creates new form Input
     */
    public Input() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        popupReg = new javax.swing.JPopupMenu();
        popupTable = new javax.swing.JPopupMenu();
        createClass = new javax.swing.JButton();
        displayTests = new javax.swing.JButton();
        clearTable = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        classAverage = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        testsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        studentAverage = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        editItem = new javax.swing.JButton();
        addTests = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadItem = new javax.swing.JMenuItem();
        saveItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        viewMenu = new javax.swing.JMenu();
        displayTests2 = new javax.swing.JMenuItem();
        clearTable2 = new javax.swing.JMenuItem();
        refresh = new javax.swing.JMenuItem();
        refreshTable = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Select Gradebook");
        fileChooser.setName(""); // NOI18N

        JMenuItem addClass = new JMenuItem("Add Class");
        JMenuItem addTest = new JMenuItem("Add Test");
        JMenuItem displayTest = new JMenuItem("Display Tests");

        popupReg.add(addClass);
        popupReg.add(addTest);
        popupReg.add(displayTest);

        addClass.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("What class would you like to add?");
            }
        });
        addTest.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("What test would you like to add?");
            }
        });
        displayTest.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("What tests would you like to display?");
            }
        });

        JMenuItem editCell = new JMenuItem("Edit Cell");
        JMenuItem deleteCell = new JMenuItem("Wow it's working");

        popupTable.add(editCell);
        popupTable.add(deleteCell);

        Object[] possibilities = null;
        JFrame frame = new JFrame();

        editCell.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                //Collect new info
                System.out.print("Item selected.");
            }
        });

        deleteCell.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.out.println("Jordan is.");
            }
        });

        /*int row = testsTable.rowAtPoint(evt.getPoint());
        int col = testsTable.columnAtPoint(evt.getPoint());

        JFrame frame = new JFrame();

        //fix code
        Object newValue = (Object) JOptionPane.showInputDialog(
            frame,
            "Please input a new value:\n",
            "New Value",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
            "");

        testsTable.setValueAt(newValue, row, col);
        */

        // Code of sub-components and layout - not shown here

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        createClass.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        createClass.setText("Create Class");
        createClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createClassActionPerformed(evt);
            }
        });

        displayTests.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        displayTests.setText("Display Tests");
        displayTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTestsActionPerformed(evt);
            }
        });

        clearTable.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        clearTable.setText("Clear Table");
        clearTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTableActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Corbel", 1, 36)); // NOI18N
        titleLabel.setText("Student Gradebook");

        classAverage.setColumns(20);
        classAverage.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        classAverage.setRows(5);

        testsTable.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        testsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        testsTable.getTableHeader().setReorderingAllowed(false);
        testsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                testsTableFocusGained(evt);
            }
        });
        testsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(testsTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Always use percentages! (60.6% not 0.606)");

        jLabel2.setText("Class Average");

        studentAverage.setColumns(20);
        studentAverage.setFont(new java.awt.Font("Monospaced", 0, 24)); // NOI18N
        studentAverage.setRows(5);

        jLabel3.setText("Student Average");

        editItem.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        editItem.setText("Edit Item");

        addTests.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        addTests.setText("Add Test");
        addTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTestsActionPerformed(evt);
            }
        });

        menuBar.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N

        fileMenu.setText("File");

        loadItem.setText("Load");
        loadItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadItem);

        saveItem.setText("Save");
        saveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        viewMenu.setText("View");

        displayTests2.setText("Display Tests");
        displayTests2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTests2ActionPerformed(evt);
            }
        });
        viewMenu.add(displayTests2);

        clearTable2.setText("Clear Table");
        clearTable2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTable2ActionPerformed(evt);
            }
        });
        viewMenu.add(clearTable2);

        refresh.setText("Refresh Page");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        viewMenu.add(refresh);

        refreshTable.setText("Refresh Table");
        refreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTableActionPerformed(evt);
            }
        });
        viewMenu.add(refreshTable);

        menuBar.add(viewMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createClass)
                                .addGap(18, 18, 18)
                                .addComponent(addTests)
                                .addGap(18, 18, 18)
                                .addComponent(displayTests)
                                .addGap(18, 18, 18)
                                .addComponent(editItem)
                                .addGap(18, 18, 18)
                                .addComponent(clearTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titleLabel)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel1))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(studentAverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(classAverage)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createClass)
                    .addComponent(addTests)
                    .addComponent(displayTests)
                    .addComponent(editItem)
                    .addComponent(clearTable))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(140, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classAverage, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(65, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public JFrame frame = new JFrame();     // Public variables for creating JOptionPane
    public Object[] possibilities = null;   // "
    public Class classChoice;

    private void createClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createClassActionPerformed

        boolean continueLoop = true; // Allow while loop to run; else, end process and exit

        //Create classname
        while (continueLoop) { //See above

            String className = (String) JOptionPane.showInputDialog(
                    frame,
                    "What is your class name?\n",
                    "Create a Class",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "");
            if (className.equals(JOptionPane.CLOSED_OPTION)) {      // End loop if user exits early (sequential tasks)
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();                   // Throw NullPointer to account for className
            }

            //Create teachername
            String teacherName = (String) JOptionPane.showInputDialog(
                    frame,
                    "What is your teacher's name?\n",
                    "Create a Class",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "");
            if (teacherName.equals(JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            //Create block number
            int blockNum = Integer.parseInt(JOptionPane.showInputDialog(
                    frame,
                    "What block does your class occur in?\n",
                    "Create a Class",
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    possibilities,
                    "").toString());
            if (blockNum == JOptionPane.CLOSED_OPTION) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            //Create day char
            String dayString = (String) JOptionPane.showInputDialog(
                    frame,
                    "What day does your class occur on (A, B, C, etc.)\n",
                    "Create a Class",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "");
            char dayChar = dayString.toUpperCase().charAt(0); // In case user enters multiple letters, or if not all uppercase
            continueLoop = false;
            if (dayString.equals(JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            //Add new class with these properties to classes
            Class myClass = new Class(className, teacherName, blockNum, dayChar);
            Gradebook.classes.add(myClass);

            //Debugging
            System.out.println("Is this information correct: " + className + ", " + teacherName + ", " + blockNum + dayChar);
        }
    }//GEN-LAST:event_createClassActionPerformed

    private void displayTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTestsActionPerformed

        Object[] currentClasses = Gradebook.classes.toArray(new Object[Gradebook.classes.size()]); // Options for JOptionPane

        classChoice = (Class) JOptionPane.showInputDialog(
                frame,
                "Which class do you want to see your tests for?\n",
                "Choose Class",
                JOptionPane.PLAIN_MESSAGE,
                null,
                currentClasses,
                "");

        DefaultTableModel model = (DefaultTableModel) testsTable.getModel();

        testsTable.setRowHeight(50);

        String[] cols = {"Test", "Grade", "Weighting", "Calculation"}; // Columns
        String data[][] = new String[classChoice.tests.size()][4];     // Rows dependent on data

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < classChoice.tests.size(); j++) {

                switch (i) {

                    case 0:
                        data[j][i] = classChoice.tests.get(j).toString();
                        break;

                    case 1:
                        data[j][i] = classChoice.tests.get(j).getGradeS();
                        break;

                    case 2:
                        data[j][i] = classChoice.tests.get(j).getWeightingS();
                        break;

                    case 3:
                        data[j][i] = classChoice.tests.get(j).getCalculationS();
                        break;

                    default:
                        data[j][i] = "";
                        break;

                }
            }
        }

        model.setDataVector(data, cols);

        //Text Fields for averages
        classAverage.setText(classChoice.classAverage() + "");

        studentAverage.setText(Gradebook.studentAverage() + "");

    }//GEN-LAST:event_displayTestsActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitItemActionPerformed

    private void clearTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTableActionPerformed
        // TODO add your handling code here:

        testsTable.setModel(new DefaultTableModel(null, new String[]{"Test", "Grade", "Weighting", "Calculation"}));

    }//GEN-LAST:event_clearTableActionPerformed

    private void saveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveItemActionPerformed
        // TODO add your handling code here:
        String fileName = "gradebook.txt";  // The name of the file to create.
        System.out.println(fileName);       // Debugging
    }//GEN-LAST:event_saveItemActionPerformed

    private void displayTests2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTests2ActionPerformed
        this.displayTestsActionPerformed(evt); // Same action in different location
    }//GEN-LAST:event_displayTests2ActionPerformed

    private void clearTable2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTable2ActionPerformed
        this.clearTableActionPerformed(evt);   // Same action in different location
    }//GEN-LAST:event_clearTable2ActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        jScrollPane1.revalidate();
        jScrollPane2.revalidate(); // Does this code refresh the page?
    }//GEN-LAST:event_refreshActionPerformed

    private void loadItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadItemActionPerformed

        /* Temporary code. Look at Mr. Pedersen's resources; as it stands, this is a test.
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                //What to do with the file, e.g. display it in a TextArea
                textarea.read(new FileReader(file.getAbsolutePath()), null);
                System.out.println("File accessed successfully.");
            } catch (IOException ex) {
                System.out.println("Problem accessing file:" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }*/

    }//GEN-LAST:event_loadItemActionPerformed

    private void testsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_testsTableFocusGained

        // n/a

    }//GEN-LAST:event_testsTableFocusGained

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

        if (SwingUtilities.isRightMouseButton(evt)) { //Only if right-click; why is this not built into AWT MouseEvent?
            System.out.println("JForm right-click");
            popupReg.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_formMouseClicked

    private void testsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testsTableMouseClicked

        if (SwingUtilities.isRightMouseButton(evt)) {
            System.out.println("Table right-click");
            int row = testsTable.rowAtPoint(evt.getPoint());
            int col = testsTable.columnAtPoint(evt.getPoint());
            System.out.println(row + " " + col); //debug

            //popupTable.show(evt.getComponent(), evt.getX(), evt.getY());
            switch (col) {

                case 0:
                    String newTestName = (String) JOptionPane.showInputDialog(
                            frame,
                            "What would you like to rename this test?\n",
                            "New Test Name",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            possibilities,
                            "");
                    if (newTestName.equals(JOptionPane.CLOSED_OPTION)) {
                        System.out.println("Closed by hitting the cross.");
                        throw new NullPointerException();
                    }
                    classChoice.selectTest(row).setName(newTestName);
                    refreshTable.doClick();
                    break;

                case 1:
                    double newTestScore = Double.parseDouble(JOptionPane.showInputDialog(
                            frame,
                            "What is the new test score?\n",
                            "Change Test Score",
                            JOptionPane.INFORMATION_MESSAGE,
                            null,
                            possibilities,
                            "").toString());
                    if (newTestScore == (JOptionPane.CLOSED_OPTION)) {
                        System.out.println("Closed by hitting the cross.");
                        throw new NullPointerException();
                    }
                    classChoice.selectTest(row).setGrade(newTestScore);
                    refreshTable.doClick();
                    break;

                case 2:
                    double newWeighting = Double.parseDouble(JOptionPane.showInputDialog(
                            frame,
                            "How much is this test actually worth?\n",
                            "Change Test Weighting",
                            JOptionPane.INFORMATION_MESSAGE,
                            null,
                            possibilities,
                            "").toString());
                    if (newWeighting == (JOptionPane.CLOSED_OPTION)) {
                        System.out.println("Closed by hitting the cross.");
                        throw new NullPointerException();
                    }
                    classChoice.selectTest(row).setWeighting(newWeighting);
                    refreshTable.doClick();
                    break;

                case 3:
                    System.out.println("Error; cannot change calculation.");
                    break;

                default:
                    System.out.println("Default.");
                    break;
            }
        }
    }//GEN-LAST:event_testsTableMouseClicked

    private void refreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTableActionPerformed
        // TODO add your handling code here:

        DefaultTableModel model = (DefaultTableModel) testsTable.getModel();

        testsTable.setRowHeight(50);

        String[] cols = {"Test", "Grade", "Weighting", "Calculation"}; // Columns
        String data[][] = new String[classChoice.tests.size()][4];     // Rows dependent on data

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < classChoice.tests.size(); j++) {

                switch (i) {

                    case 0:
                        data[j][i] = classChoice.tests.get(j).toString();
                        break;

                    case 1:
                        data[j][i] = classChoice.tests.get(j).getGradeS();
                        break;

                    case 2:
                        data[j][i] = classChoice.tests.get(j).getWeightingS();
                        break;

                    case 3:
                        data[j][i] = classChoice.tests.get(j).getCalculationS();
                        break;

                    default:
                        data[j][i] = "";
                        break;

                }
            }
        }

        model.setDataVector(data, cols);

        //Text Fields for averages
        classAverage.setText(classChoice.classAverage() + "");

        studentAverage.setText(Gradebook.studentAverage() + "");

    }//GEN-LAST:event_refreshTableActionPerformed

    private void addTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTestsActionPerformed
        // TODO add your handling code here:
        boolean continueLoop = true;

        Object[] currentClasses = Gradebook.classes.toArray(new Object[Gradebook.classes.size()]);

        while (continueLoop) {

            // Choose class
            classChoice = (Class) JOptionPane.showInputDialog(
                    frame,
                    "Which class do you want to add to?\n",
                    "Add Test",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    currentClasses,
                    "");
            if (classChoice.equals(JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;   // See earlier logic
                throw new NullPointerException("Test");
            }

            // Choose test name
            String testName = (String) JOptionPane.showInputDialog(
                    frame,
                    "What would you like to name this test?\n",
                    "Add Test",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    possibilities,
                    "");
            if (testName.equals(JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            // Input test score
            double testScore = Double.parseDouble(JOptionPane.showInputDialog(
                    frame,
                    "What did you get on " + testName + " ?\n",
                    "Add Test",
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    possibilities,
                    "").toString());
            if (testScore == (JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            // Input weighting
            double weighting = Double.parseDouble(JOptionPane.showInputDialog(
                    frame,
                    "How much is " + testName + " worth?\n",
                    "Add Test",
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    possibilities,
                    "").toString());
            if (weighting == (JOptionPane.CLOSED_OPTION)) {
                System.out.println("Closed by hitting the cross");
                continueLoop = false;
                throw new NullPointerException();
            }

            Test myTest = new Test(classChoice, testName, testScore, weighting);
            classChoice.tests.add(myTest);

            continueLoop = false; // end loop
        }
        refreshTable.doClick();
    }//GEN-LAST:event_addTestsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Input.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Input().setVisible(true);
            }

        });

        //test
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTests;
    private javax.swing.JTextArea classAverage;
    private javax.swing.JButton clearTable;
    private javax.swing.JMenuItem clearTable2;
    private javax.swing.JButton createClass;
    private javax.swing.JButton displayTests;
    private javax.swing.JMenuItem displayTests2;
    private javax.swing.JButton editItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem loadItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPopupMenu popupReg;
    public javax.swing.JPopupMenu popupTable;
    private javax.swing.JMenuItem refresh;
    private javax.swing.JMenuItem refreshTable;
    private javax.swing.JMenuItem saveItem;
    private javax.swing.JTextArea studentAverage;
    private javax.swing.JTable testsTable;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JMenu viewMenu;
    // End of variables declaration//GEN-END:variables
}
